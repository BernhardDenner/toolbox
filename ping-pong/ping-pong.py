import sys
import socket
import time
import threading
import logging

# most of this was generated by ChatGPT3.5
# Bdenner: 2024-01-29

# Define constants
HOST = '127.0.0.1'
PORT = 65432
BUFFER_SIZE = 1024

logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

def send_ping(sock):
    ping_time = time.time()
    sock.sendall(b'ping')
    return ping_time

def receive_pong(sock):
    data = sock.recv(BUFFER_SIZE)
    pong_time = time.time()
    return pong_time

def client_thread():
    highest_delta = 0
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client_socket:
        client_socket.connect((HOST, PORT))
        while True:
            time1 = time.time()
            data = client_socket.recv(BUFFER_SIZE)
            if data == b'ping':
                time2 = time.time()
                client_socket.sendall(b'pong')
                delta = time2 - time1
                if delta > highest_delta:
                    logging.info("new high: %.2fms, was %.2fms" % (delta * 1000, highest_delta * 1000))
                    highest_delta = delta
                if delta > 0.02:
                    logging.warning("pong: %.2fms" % (delta * 1000))

def server_thread():
    highest_delta = 0
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
        server_socket.bind((HOST, PORT))
        server_socket.listen()
        logging.info(f"Listening on {HOST}:{PORT} ...")
        while True:
            conn, addr = server_socket.accept()
            with conn:
                while True:
                    try:
                        ping_time = time.time()
                        conn.sendall(b'ping')
                        data = conn.recv(BUFFER_SIZE)
                        if data == b'pong':
                            pong_time = time.time()
                            delta = pong_time - ping_time
                            if delta > highest_delta:
                                logging.info("new high: %.2fms, was %.2fms" %(delta *1000, highest_delta * 1000))
                                highest_delta = delta
                            if delta > 0.0005:
                                logging.warning(f"ping -> pong: %.4fms"  % (delta * 1000) )


                        time.sleep(0.01)
                    except Exception as e:
                        logging.error("Exception:",e)
                        break

def main():
    # Determine the instance ID
    is_server = False
    if len(sys.argv) > 1:
        if sys.argv[1] in ["-s", "--server"]:
            is_server = True

    # Start the server and client threads
    if is_server:
        server = threading.Thread(target=server_thread)
        server.start()
        server.join()

    else:
        while True:
            try:
                client = threading.Thread(target=client_thread)
                client.start()
                client.join()
            except KeyboardInterrupt:
                logging.info("Exiting.")
                break
            except Exception as e:
                logging.error("Exception:", e)


if __name__ == "__main__":
    main()

